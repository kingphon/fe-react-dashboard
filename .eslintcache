[{"D:\\Documents\\dev\\fe-react\\src\\index.js":"1","D:\\Documents\\dev\\fe-react\\src\\reportWebVitals.js":"2","D:\\Documents\\dev\\fe-react\\src\\App.js":"3","D:\\Documents\\dev\\fe-react\\src\\components\\atoms\\Button\\index.js":"4","D:\\Documents\\dev\\fe-react\\src\\components\\atoms\\Input\\index.js":"5","D:\\Documents\\dev\\fe-react-dashboard\\src\\index.js":"6","D:\\Documents\\dev\\fe-react-dashboard\\src\\reportWebVitals.js":"7","D:\\Documents\\dev\\fe-react-dashboard\\src\\App.js":"8","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Location\\District\\index.js":"9","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Location\\Province\\index.js":"10","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\templates\\layouts\\Main\\index.js":"11","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Header\\index.js":"12","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\HorizontalSideBar\\index.js":"13","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\Input\\index.js":"14","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\Button\\index.js":"15","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\molecules\\FilterStatus\\index.js":"16","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\Fieldset\\index.js":"17","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\StatusLabel\\index.js":"18","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\molecules\\TableModule\\index.js":"19","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\molecules\\PageSearch\\index.js":"20","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\rootReducer.js":"21","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\axios.js":"22","D:\\Documents\\dev\\fe-react-dashboard\\src\\constants\\redux-actions.js":"23","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\index.js":"24","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\molecules\\ModalModule\\index.js":"25","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\CheckBox\\index.js":"26","D:\\Documents\\dev\\fe-react-dashboard\\src\\commons\\utils.js":"27","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\FormGroup\\index.js":"28","D:\\Documents\\dev\\fe-react-dashboard\\src\\commons\\sweet-alert-modal.js":"29","D:\\Documents\\dev\\fe-react-dashboard\\src\\constants\\sweet-alert2.js":"30","D:\\Documents\\dev\\fe-react-dashboard\\src\\constants\\entities.js":"31","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\ToggleActive\\index.js":"32","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\Province\\ProvinceTable\\index.js":"33","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\Province\\ProvinceModal\\index.js":"34","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\District\\DistrictModal\\index.js":"35","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\District\\DistrictTable\\index.js":"36","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\ComboBox\\index.js":"37","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\location\\districtReducer.js":"38","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\location\\provinceReducer.js":"39","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Location\\Ward\\index.js":"40","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\location\\wardReducer.js":"41","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\Ward\\WardTable\\index.js":"42","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\Ward\\WardModal\\index.js":"43","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\classification\\categoryReducer.js":"44","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Classification\\Category\\index.js":"45","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\Category\\CategoryTable\\index.js":"46","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\Category\\CategoryModal\\index.js":"47","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Classification\\TypeGroup\\index.js":"48","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Classification\\Type\\index.js":"49","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\classification\\typeGroupReducer.js":"50","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\classification\\typeReducer.js":"51","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\TypeGroup\\TypeGroupTable\\index.js":"52","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\Type\\TypeTable\\index.js":"53","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\Type\\TypeModal\\index.js":"54","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\TypeGroup\\TypeGroupModal\\index.js":"55"},{"size":588,"mtime":1611843162792,"results":"56","hashOfConfig":"57"},{"size":362,"mtime":1611785842220,"results":"58","hashOfConfig":"57"},{"size":976,"mtime":1612240516728,"results":"59","hashOfConfig":"57"},{"size":852,"mtime":1611806100600,"results":"60","hashOfConfig":"57"},{"size":561,"mtime":1612241483635,"results":"61","hashOfConfig":"57"},{"size":950,"mtime":1614851288956,"results":"62","hashOfConfig":"63"},{"size":362,"mtime":1611785842220,"results":"64","hashOfConfig":"63"},{"size":1493,"mtime":1616600080718,"results":"65","hashOfConfig":"63"},{"size":1846,"mtime":1615884182122,"results":"66","hashOfConfig":"63"},{"size":1833,"mtime":1615884176410,"results":"67","hashOfConfig":"63"},{"size":512,"mtime":1616329428467,"results":"68","hashOfConfig":"63"},{"size":2206,"mtime":1615884197370,"results":"69","hashOfConfig":"63"},{"size":4127,"mtime":1616599967639,"results":"70","hashOfConfig":"63"},{"size":561,"mtime":1612241483635,"results":"71","hashOfConfig":"63"},{"size":852,"mtime":1611806100600,"results":"72","hashOfConfig":"63"},{"size":1306,"mtime":1615557176735,"results":"73","hashOfConfig":"63"},{"size":324,"mtime":1615544675511,"results":"74","hashOfConfig":"63"},{"size":248,"mtime":1612221873717,"results":"75","hashOfConfig":"63"},{"size":10041,"mtime":1615563641033,"results":"76","hashOfConfig":"63"},{"size":640,"mtime":1612256566466,"results":"77","hashOfConfig":"63"},{"size":4441,"mtime":1616329733463,"results":"78","hashOfConfig":"63"},{"size":341,"mtime":1614228140468,"results":"79","hashOfConfig":"63"},{"size":110,"mtime":1614673961637,"results":"80","hashOfConfig":"63"},{"size":620,"mtime":1616600664396,"results":"81","hashOfConfig":"63"},{"size":2638,"mtime":1615778922663,"results":"82","hashOfConfig":"63"},{"size":366,"mtime":1612221860723,"results":"83","hashOfConfig":"63"},{"size":1440,"mtime":1615561880681,"results":"84","hashOfConfig":"63"},{"size":291,"mtime":1612221864332,"results":"85","hashOfConfig":"63"},{"size":745,"mtime":1615556322874,"results":"86","hashOfConfig":"63"},{"size":91,"mtime":1614229126676,"results":"87","hashOfConfig":"63"},{"size":1042,"mtime":1615556607694,"results":"88","hashOfConfig":"63"},{"size":1004,"mtime":1615713663470,"results":"89","hashOfConfig":"63"},{"size":2430,"mtime":1616329100051,"results":"90","hashOfConfig":"63"},{"size":3114,"mtime":1616328962952,"results":"91","hashOfConfig":"63"},{"size":3644,"mtime":1616329014993,"results":"92","hashOfConfig":"63"},{"size":2550,"mtime":1616328787336,"results":"93","hashOfConfig":"63"},{"size":733,"mtime":1615992607397,"results":"94","hashOfConfig":"63"},{"size":10180,"mtime":1616329442388,"results":"95","hashOfConfig":"63"},{"size":9445,"mtime":1616392328759,"results":"96","hashOfConfig":"63"},{"size":1782,"mtime":1616328659563,"results":"97","hashOfConfig":"63"},{"size":10693,"mtime":1617191828326,"results":"98","hashOfConfig":"63"},{"size":2610,"mtime":1616329293755,"results":"99","hashOfConfig":"63"},{"size":4306,"mtime":1616329045396,"results":"100","hashOfConfig":"63"},{"size":9446,"mtime":1616598386827,"results":"101","hashOfConfig":"63"},{"size":1855,"mtime":1616598591295,"results":"102","hashOfConfig":"63"},{"size":2436,"mtime":1616599660026,"results":"103","hashOfConfig":"63"},{"size":3120,"mtime":1616599592321,"results":"104","hashOfConfig":"63"},{"size":1869,"mtime":1616600725493,"results":"105","hashOfConfig":"63"},{"size":1805,"mtime":1617191691555,"results":"106","hashOfConfig":"63"},{"size":10229,"mtime":1617190932621,"results":"107","hashOfConfig":"63"},{"size":10839,"mtime":1617601096821,"results":"108","hashOfConfig":"63"},{"size":2574,"mtime":1617191305584,"results":"109","hashOfConfig":"63"},{"size":2620,"mtime":1617191567442,"results":"110","hashOfConfig":"63"},{"size":4371,"mtime":1617199019523,"results":"111","hashOfConfig":"63"},{"size":3675,"mtime":1617190817796,"results":"112","hashOfConfig":"63"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"14ypwet",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"hmikxl",{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"126"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"126"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"126"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"126"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"126"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"126"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"126"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"D:\\Documents\\dev\\fe-react\\src\\index.js",[],["234","235"],"D:\\Documents\\dev\\fe-react\\src\\reportWebVitals.js",[],"D:\\Documents\\dev\\fe-react\\src\\App.js",[],"D:\\Documents\\dev\\fe-react\\src\\components\\atoms\\Button\\index.js",[],"D:\\Documents\\dev\\fe-react\\src\\components\\atoms\\Input\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\index.js",[],["236","237"],"D:\\Documents\\dev\\fe-react-dashboard\\src\\reportWebVitals.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\App.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Location\\District\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Location\\Province\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\templates\\layouts\\Main\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Header\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\HorizontalSideBar\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\Input\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\Button\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\molecules\\FilterStatus\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\Fieldset\\index.js",[],["238","239"],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\StatusLabel\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\molecules\\TableModule\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\molecules\\PageSearch\\index.js",[],["240","241"],"D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\rootReducer.js",["242","243","244","245","246"],"import { HANDLE_SYSTEM_ERROR } from '../../constants/redux-actions'\r\n// import axios from '../axios'\r\n// import cookie from 'js-cookie'\r\n// import { USER_TOKEN, USER_AUTH } from '../../constants';\r\n\r\nexport const initialState = {\r\n    formLoading: false,\r\n    loginForm: {},\r\n    userAuth: {},\r\n    systemErrors: {\r\n        message: '',\r\n        detail: ''\r\n    },\r\n    errors: {\r\n        formErrors: {},\r\n        errorMessage: ''\r\n    },\r\n    systemPopup: {\r\n        open: false,\r\n        type: 'success',\r\n        message: ''\r\n    }\r\n}\r\n\r\nconst PATH_API_LOGIN = 'user/login'\r\nconst PATH_API_LOGOUT = 'user/logout'\r\nconst createAction = action => `SYSTEM_${action}`\r\n\r\nconst SYSTEM_ERROR_MESSAGE = 'The system has an undefined error, please try again later.'\r\n\r\nconst RESET_SYSTEM_ERRORS = 'RESET_SYSTEM_ERRORS'\r\nconst SET_SYSTEM_POPUP = 'SET_SYSTEM_POPUP'\r\n\r\nexport const reload = pageName => ({ type: `${pageName}_RELOAD` })\r\n\r\nconst SET_LOGIN_FORM = createAction(\"SET_LOGIN_FORM\")\r\nexport const setLoginForm = loginForm => ({ type: SET_LOGIN_FORM, loginForm })\r\n\r\nconst SET_FORM_LOADING = createAction(\"SET_FORM_LOADING\")\r\nconst setFormLoading = loading => ({ type: SET_FORM_LOADING, loading })\r\n\r\n// const SET_USER_AUTH = createAction(\"SET_USER_AUTH\")\r\n// export const setUserAuth = userAuth => ({ type: SET_USER_AUTH, userAuth })\r\n\r\nconst HANDLE_FORM_ERRORS = createAction(\"HANDLE_FORM_ERRORS\")\r\n\r\n// export const doLogin = (params, callback) => dispatch => {\r\n//     dispatch(setFormLoading(true))\r\n//     return axios.post(PATH_API_LOGIN, params, {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     })\r\n//     .then(response => {\r\n//         cookie.set(USER_TOKEN, response.data.token)\r\n//         cookie.set(USER_AUTH, response.data)\r\n//         dispatch(setUserAuth(response.data))\r\n//         callback()\r\n//     })\r\n//     .catch(error => dispatch(handleErrors(error, HANDLE_FORM_ERRORS)))\r\n//     .finally(() => dispatch(setFormLoading(false)))\r\n// }\r\n\r\n// export const doLogout = callback => dispatch => {\r\n//     // return axios.post(PATH_API_LOGOUT, params, {\r\n//     //     headers: {\r\n//     //         'Content-Type': 'application/json'\r\n//     //     }\r\n//     // })\r\n//     // .then(() => {\r\n//     //     cookie.remove(USER_TOKEN)\r\n//     //     dispatch(setUserAuth({}))\r\n//     //     callback()\r\n//     // })\r\n//     // .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n//     // .finally(() => dispatch(setFormLoading(false)))\r\n//     cookie.remove(USER_TOKEN)\r\n//     callback()\r\n// }\r\n\r\nexport const handleErrors = (errors = {}, pageErrorHandle) => {\r\n    console.log(errors)\r\n    if (errors.response) {\r\n        if (errors.response.data && errors.response.data.formErrors) {\r\n            return ({ type: pageErrorHandle, ...errors.response.data })\r\n        }\r\n    }\r\n    return ({ type: HANDLE_SYSTEM_ERROR })\r\n}\r\n\r\nexport const openSystemPopup = (open, message, typePopup = 'success') => {\r\n    return ({ type: SET_SYSTEM_POPUP, open, message, typePopup })\r\n}\r\n\r\nexport const resetSystemErrors = () => ({ type: RESET_SYSTEM_ERRORS })\r\n\r\nexport default function(state = initialState, action) {\r\n    try {\r\n        switch (action.type) {\r\n            case SET_FORM_LOADING: return {\r\n                ...state,\r\n                formLoading: action.loading\r\n            }\r\n            case HANDLE_SYSTEM_ERROR: return {\r\n                ...state,\r\n                systemErrors: {\r\n                    message: SYSTEM_ERROR_MESSAGE,\r\n                    detail: action.detail\r\n                }\r\n            }\r\n            case RESET_SYSTEM_ERRORS: return {\r\n                ...state,\r\n                systemErrors: initialState.systemErrors\r\n            }\r\n            // case SET_USER_AUTH: return {\r\n            //     ...state,\r\n            //     userAuth: action.userAuth\r\n            // }\r\n            case SET_LOGIN_FORM: return {\r\n                ...state,\r\n                loginForm: action.loginForm\r\n            }\r\n            case SET_SYSTEM_POPUP: return {\r\n                ...state,\r\n                systemPopup: {\r\n                    open: action.open,\r\n                    type: action.typePopup,\r\n                    message: action.message\r\n                }\r\n            }\r\n            default: return {\r\n                ...state\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    return state;\r\n}","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\axios.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\constants\\redux-actions.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\molecules\\ModalModule\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\CheckBox\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\commons\\utils.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\FormGroup\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\commons\\sweet-alert-modal.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\constants\\sweet-alert2.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\constants\\entities.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\ToggleActive\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\Province\\ProvinceTable\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\Province\\ProvinceModal\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\District\\DistrictModal\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\District\\DistrictTable\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\atoms\\ComboBox\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\location\\districtReducer.js",["247"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { CONFIRM_DELETE } from \"../../../commons/sweet-alert-modal\";\r\nimport { ALL } from '../../../constants/entities';\r\nimport { REDUX_API_URL } from \"../../../constants/redux-actions\";\r\nimport {\r\n  handleErrors,\r\n  resetSystemErrors\r\n} from \"../rootReducer\";\r\n\r\nconst prefix = \"DISTRICT_\";\r\n// API\r\nconst PATH_API = `${REDUX_API_URL}/districts`;\r\nconst createAction = action => `${prefix}${action}`;\r\n\r\nexport const initialState = {\r\n  loading: true,\r\n  createButtonLoading: false,\r\n  formLoading: false,\r\n  modalFormSuccessMessage: \"\",\r\n  openModal: false,\r\n  filters: {\r\n    status: ALL\r\n  },\r\n  districtList: [\r\n  ],\r\n  district: {\r\n    name: \"\",\r\n    slugName: \"\",\r\n    provinceId: \"\",\r\n    status: \"ACTIVE\"\r\n  },\r\n  provinceList: [],\r\n  searchKeywords: \"\",\r\n  errors: {\r\n    formErrors: {\r\n    },\r\n    errorMessage: \"\"\r\n  }\r\n};\r\n\r\nconst LIST_LOADING = createAction(\"LIST_LOADING\");\r\nconst CREATE_BUTTON_LOADING = createAction(\"CREATE_BUTTON_LOADING\");\r\nconst OPEN_MODAL = createAction(\"OPEN_MODAL\");\r\nconst PREPARE_DATA = createAction(\"PREPARE_DATA\");\r\nconst PREPARE_DATA_PROVINCE = createAction(\"PREPARE_DATA_PROVINCE\");\r\nconst MODAL_FORM_LOADING = createAction(\"MODAL_FORM_LOADING\");\r\nconst MODAL_FORM_UPDATE_SUCCESS = createAction(\"MODAL_FORM_UPDATE_SUCESS\");\r\nconst SET_DISTRICT = createAction(\"SET_DISTRICT\");\r\nconst SET_SEARCH_KEYWORDS = createAction(\"SET_SEARCH_KEYWORDS\");\r\nconst SET_MODAL_STATUS = createAction(\"SET_MODAL_STATUS\");\r\nconst SET_SELECTED_FILTER = createAction(\"SET_SELECTED_FILTER\");\r\nconst CLOSE_MODAL = createAction(\"CLOSE_MODAL\");\r\nconst UPDATE_FILTERS = createAction(\"UPDATE_FILTERS\");\r\nconst HANDLE_ERRORS = createAction(\"HANDLE_ERRORS\");\r\nconst SET_ERRORS = createAction(\"SET_ERRORS\");\r\nconst SET_FORM_ERRORS = createAction(\"SET_FORM_ERRORS\");\r\n\r\nconst listLoading = loading => ({ type: LIST_LOADING, loading });\r\nconst createButtonLoading = loading => ({\r\n  type: CREATE_BUTTON_LOADING,\r\n  loading\r\n});\r\nconst formLoading = loading => ({ type: MODAL_FORM_LOADING, loading });\r\nconst prepareData = data => ({\r\n  type: PREPARE_DATA,\r\n  districtList: data\r\n});\r\nconst prepareDataProvince = data => ({\r\n  type: PREPARE_DATA_PROVINCE,\r\n  provinceList: data\r\n});\r\nconst setOpenModal = openModal => ({ type: OPEN_MODAL, openModal });\r\nconst setErrors = errors => ({ type: SET_ERRORS, errors });\r\nconst setFormErrors = formErrors => ({ type: SET_FORM_ERRORS, formErrors });\r\nconst modalFormSuccessMessage = message => ({\r\n  type: MODAL_FORM_UPDATE_SUCCESS,\r\n  message\r\n});\r\n\r\nexport const setDistrict = district => ({ type: SET_DISTRICT, district });\r\n\r\nexport const setSearchKeywords = searchKeywords => ({ type: SET_SEARCH_KEYWORDS, searchKeywords });\r\n\r\nexport const setModalStatus = modalStatus => ({\r\n  type: SET_MODAL_STATUS,\r\n  modalStatus\r\n});\r\n\r\nexport const setSelectedFilters = selectedFilters => ({\r\n  type: SET_SELECTED_FILTER,\r\n  selectedFilters\r\n});\r\n\r\nexport const closeModal = () => ({ type: CLOSE_MODAL });\r\nexport const fetchAllProvince = () => async dispatch => {\r\n\r\n  return axios\r\n    .get(`${REDUX_API_URL}/provinces-creation`, { timeout: 5000 })\r\n    .then(response => dispatch(prepareDataProvince(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n};\r\n\r\nexport const fetchAll = () => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  return axios\r\n    .get(PATH_API, { timeout: 5000 })\r\n    .then(response => dispatch(prepareData(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nexport const doSave = district => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(formLoading(true));\r\n  const {\r\n    id,\r\n    name,\r\n    slugName,\r\n    provinceId,\r\n    status\r\n  } = district;\r\n  const params = {\r\n    name,\r\n    slugName,\r\n    provinceId,\r\n    status,\r\n  };\r\n  const formErrors = {}\r\n  for (const param in params) {\r\n    const element = params[param];\r\n    if (!element) {\r\n      formErrors[param] = \"Vui lòng nhập đầy đủ thông tin\"\r\n    }\r\n  }\r\n  if (Object.keys(formErrors).length === 0) {\r\n    dispatch(setFormErrors({}))\r\n    if (!id) {\r\n      dispatch(doCreate(params));\r\n    } else {\r\n      dispatch(doUpdate({ ...params, id }));\r\n    }\r\n  } else {\r\n    dispatch(setFormErrors(formErrors))\r\n    dispatch(formLoading(false));\r\n  }\r\n};\r\n\r\nexport const getCreateAction = () => dispatch => {\r\n  dispatch(createButtonLoading(true));\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(setOpenModal(true));\r\n  dispatch(fetchAllProvince());\r\n  dispatch(createButtonLoading(false));\r\n};\r\n\r\nexport const doFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport const getUpdateAction = districtId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(listLoading(true));\r\n  dispatch(fetchAllProvince());\r\n  axios\r\n    .get(`${PATH_API}/${districtId}`, { timeout: 5000 })\r\n    .then(response => {\r\n      dispatch({\r\n        type: SET_DISTRICT,\r\n        district: response.data,\r\n      });\r\n      dispatch(setOpenModal(true));\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nconst doCreate = district => async dispatch => {\r\n  const params = JSON.stringify(district);\r\n  axios\r\n    .post(PATH_API, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"District is created successfully!!\")\r\n      dispatch(setDistrict(initialState.district));\r\n    })\r\n    .catch(error => {\r\n      toast.error(\"error\")\r\n      dispatch(handleErrors(error, HANDLE_ERRORS))\r\n    })\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nconst doUpdate = district => async dispatch => {\r\n  const params = JSON.stringify(district);\r\n  return axios\r\n    .put(`${PATH_API}/${district.id}`, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"District is update successfully!!\");\r\n      dispatch(closeModal())\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nexport const doDelete = districtId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  dispatch(setErrors(initialState.errors));\r\n  const params = JSON.stringify(districtId);\r\n  CONFIRM_DELETE(\"Bạn sẽ không thể khôi phục lại dữ liệu\").then((result) => {\r\n    if (result.isConfirmed) {\r\n      return !Array.isArray(districtId) ?\r\n        axios\r\n          .delete(`${PATH_API}/${districtId}`)\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete District #${districtId} success!!`);\r\n          })\r\n          .catch(errors => dispatch(handleErrors(errors, HANDLE_ERRORS)))\r\n          .finally(() => dispatch(listLoading(false))) :\r\n        axios\r\n          .post(`${PATH_API}/delete-items`, params, {\r\n            timeout: 5000,\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }\r\n          })\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete District #${districtId} success!!`)\r\n          })\r\n          .catch(error => {\r\n            toast.error(\"error\")\r\n            dispatch(handleErrors(error, HANDLE_ERRORS))\r\n          })\r\n          .finally(() => dispatch(listLoading(false)));\r\n    }\r\n  })\r\n};\r\n\r\nexport const setFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport default function (state = initialState, action) {\r\n  try {\r\n    switch (action.type) {\r\n      case LIST_LOADING:\r\n        return { ...state, loading: action.loading };\r\n      case CREATE_BUTTON_LOADING:\r\n        return { ...state, createButtonLoading: action.loading };\r\n      case MODAL_FORM_UPDATE_SUCCESS:\r\n        return { ...state, modalFormSuccessMessage: action.message };\r\n      case OPEN_MODAL:\r\n        return { ...state, openModal: action.openModal };\r\n      case MODAL_FORM_LOADING:\r\n        return {\r\n          ...state,\r\n          formLoading: action.loading,\r\n          errors: action.loading ? initialState.errors : state.errors\r\n        };\r\n      case PREPARE_DATA:\r\n        return {\r\n          ...state,\r\n          districtList: action.districtList,\r\n          loading: false\r\n        };\r\n      case PREPARE_DATA_PROVINCE:\r\n        return {\r\n          ...state,\r\n          provinceList: action.provinceList,\r\n        };\r\n      case UPDATE_FILTERS:\r\n        return {\r\n          ...state,\r\n          filters: action.filters\r\n        };\r\n      case SET_DISTRICT:\r\n        return {\r\n          ...state,\r\n          district: action.district,\r\n        };\r\n      case SET_SEARCH_KEYWORDS:\r\n        return {\r\n          ...state,\r\n          searchKeywords: action.searchKeywords,\r\n        };\r\n      case CLOSE_MODAL:\r\n        return {\r\n          ...state,\r\n          openModal: false,\r\n          district: initialState.district,\r\n          formLoading: initialState.formLoading,\r\n          errors: initialState.errors\r\n        };\r\n      case SET_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...initialState.errors,\r\n            ...action.errors\r\n          }\r\n        };\r\n      case SET_FORM_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            formErrors: action.formErrors,\r\n            ...initialState.errors.message,\r\n          }\r\n        };\r\n      case HANDLE_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...state.errors,\r\n            ...action.errors.response.data\r\n          }\r\n        };\r\n      default:\r\n        return { ...state };\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  } finally {\r\n  }\r\n\r\n  return state;\r\n}\r\n","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\location\\provinceReducer.js",["248"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { CONFIRM_DELETE } from \"../../../commons/sweet-alert-modal\";\r\nimport { ALL } from '../../../constants/entities';\r\nimport { REDUX_API_URL } from \"../../../constants/redux-actions\";\r\nimport {\r\n  handleErrors,\r\n  resetSystemErrors\r\n} from \"../rootReducer\";\r\n\r\nconst prefix = \"PROVINCE_\";\r\n// API\r\nconst PATH_API = `${REDUX_API_URL}/provinces`;\r\nconst createAction = action => `${prefix}${action}`;\r\n\r\nexport const initialState = {\r\n  loading: true,\r\n  createButtonLoading: false,\r\n  formLoading: false,\r\n  modalFormSuccessMessage: \"\",\r\n  openModal: false,\r\n  filters: {\r\n    status: ALL\r\n  },\r\n  provinceList: [\r\n  ],\r\n  province: {\r\n    name: \"\",\r\n    slugName: \"\",\r\n    status: \"ACTIVE\"\r\n  },\r\n  searchKeywords: \"\",\r\n  errors: {\r\n    formErrors: {},\r\n    errorMessage: \"\"\r\n  }\r\n};\r\n\r\nconst LIST_LOADING = createAction(\"LIST_LOADING\");\r\nconst CREATE_BUTTON_LOADING = createAction(\"CREATE_BUTTON_LOADING\");\r\nconst OPEN_MODAL = createAction(\"OPEN_MODAL\");\r\nconst PREPARE_DATA = createAction(\"PREPARE_DATA\");\r\nconst MODAL_FORM_LOADING = createAction(\"MODAL_FORM_LOADING\");\r\nconst MODAL_FORM_UPDATE_SUCCESS = createAction(\"MODAL_FORM_UPDATE_SUCESS\");\r\nconst SET_PROVINCE = createAction(\"SET_PROVINCE\");\r\nconst SET_SEARCH_KEYWORDS = createAction(\"SET_SEARCH_KEYWORDS\");\r\nconst SET_MODAL_STATUS = createAction(\"SET_MODAL_STATUS\");\r\nconst SET_SELECTED_FILTER = createAction(\"SET_SELECTED_FILTER\");\r\nconst CLOSE_MODAL = createAction(\"CLOSE_MODAL\");\r\nconst UPDATE_FILTERS = createAction(\"UPDATE_FILTERS\");\r\nconst HANDLE_ERRORS = createAction(\"HANDLE_ERRORS\");\r\nconst SET_ERRORS = createAction(\"SET_ERRORS\");\r\nconst SET_FORM_ERRORS = createAction(\"SET_FORM_ERRORS\");\r\n\r\nconst listLoading = loading => ({ type: LIST_LOADING, loading });\r\nconst createButtonLoading = loading => ({\r\n  type: CREATE_BUTTON_LOADING,\r\n  loading\r\n});\r\nconst formLoading = loading => ({ type: MODAL_FORM_LOADING, loading });\r\nconst prepareData = data => ({\r\n  type: PREPARE_DATA,\r\n  provinceList: data\r\n});\r\nconst setOpenModal = openModal => ({ type: OPEN_MODAL, openModal });\r\nconst setErrors = errors => ({ type: SET_ERRORS, errors });\r\nconst setFormErrors = formErrors => ({ type: SET_FORM_ERRORS, formErrors });\r\nconst modalFormSuccessMessage = message => ({\r\n  type: MODAL_FORM_UPDATE_SUCCESS,\r\n  message\r\n});\r\n\r\nexport const setProvince = province => ({ type: SET_PROVINCE, province });\r\n\r\nexport const setSearchKeywords = searchKeywords => ({ type: SET_SEARCH_KEYWORDS, searchKeywords });\r\n\r\nexport const setModalStatus = modalStatus => ({\r\n  type: SET_MODAL_STATUS,\r\n  modalStatus\r\n});\r\n\r\nexport const setSelectedFilters = selectedFilters => ({\r\n  type: SET_SELECTED_FILTER,\r\n  selectedFilters\r\n});\r\n\r\nexport const closeModal = () => ({ type: CLOSE_MODAL });\r\n\r\nexport const fetchAll = () => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  return axios\r\n    .get(PATH_API, { timeout: 5000 })\r\n    .then(response => dispatch(prepareData(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nexport const doSave = province => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(formLoading(true));\r\n  const {\r\n    id,\r\n    name,\r\n    slugName,\r\n    status\r\n  } = province;\r\n  const params = {\r\n    name,\r\n    slugName,\r\n    status,\r\n  };\r\n  const formErrors = {}\r\n  for (const param in params) {\r\n    const element = params[param];\r\n    if (!element) {\r\n      formErrors[param] = \"Vui lòng nhập đầy đủ thông tin\"\r\n    }\r\n  }\r\n  if (Object.keys(formErrors).length === 0) {\r\n    dispatch(setFormErrors({}))\r\n    if (!id) {\r\n      dispatch(doCreate(params));\r\n    } else {\r\n      dispatch(doUpdate({ ...params, id }));\r\n    }\r\n  } else {\r\n    dispatch(setFormErrors(formErrors))\r\n    dispatch(formLoading(false));\r\n  }\r\n};\r\n\r\nexport const getCreateAction = () => dispatch => {\r\n  dispatch(createButtonLoading(true));\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(setOpenModal(true))\r\n  dispatch(createButtonLoading(false));\r\n};\r\n\r\nexport const doFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport const getUpdateAction = provinceId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(listLoading(true));\r\n  axios\r\n    .get(`${PATH_API}/${provinceId}`, { timeout: 5000 })\r\n    .then(response => {\r\n      dispatch({\r\n        type: SET_PROVINCE,\r\n        province: response.data,\r\n      });\r\n      dispatch(setOpenModal(true));\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nconst doCreate = province => async dispatch => {\r\n  const params = JSON.stringify(province);\r\n  axios\r\n    .post(PATH_API, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"Province is created successfully!!\")\r\n      dispatch(setProvince(initialState.province));\r\n    })\r\n    .catch(error => {\r\n      toast.error(\"error\")\r\n      dispatch(handleErrors(error, HANDLE_ERRORS))\r\n    })\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nconst doUpdate = province => async dispatch => {\r\n  const params = JSON.stringify(province);\r\n  return axios\r\n    .put(`${PATH_API}/${province.id}`, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"Province is update successfully!!\");\r\n      dispatch(closeModal())\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nexport const doDelete = provinceId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  dispatch(setErrors(initialState.errors));\r\n  const params = JSON.stringify(provinceId);\r\n  CONFIRM_DELETE(\"Bạn sẽ không thể khôi phục lại dữ liệu\").then((result) => {\r\n    if (result.isConfirmed) {\r\n      return !Array.isArray(provinceId) ?\r\n        axios\r\n          .delete(`${PATH_API}/${provinceId}`)\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete Province #${provinceId} success!!`);\r\n          })\r\n          .catch(errors => dispatch(handleErrors(errors, HANDLE_ERRORS)))\r\n          .finally(() => dispatch(listLoading(false))) :\r\n        axios\r\n          .post(`${PATH_API}/delete-items`, params, {\r\n            timeout: 5000,\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }\r\n          })\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete Province #${provinceId} success!!`)\r\n          })\r\n          .catch(error => {\r\n            toast.error(\"error\")\r\n            dispatch(handleErrors(error, HANDLE_ERRORS))\r\n          })\r\n          .finally(() => dispatch(listLoading(false)));\r\n    }\r\n  })\r\n};\r\n\r\nexport const setFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport default function (state = initialState, action) {\r\n  try {\r\n    switch (action.type) {\r\n      case LIST_LOADING:\r\n        return { ...state, loading: action.loading };\r\n      case CREATE_BUTTON_LOADING:\r\n        return { ...state, createButtonLoading: action.loading };\r\n      case MODAL_FORM_UPDATE_SUCCESS:\r\n        return { ...state, modalFormSuccessMessage: action.message };\r\n      case OPEN_MODAL:\r\n        return { ...state, openModal: action.openModal };\r\n      case MODAL_FORM_LOADING:\r\n        return {\r\n          ...state,\r\n          formLoading: action.loading,\r\n          errors: action.loading ? initialState.errors : state.errors\r\n        };\r\n      case PREPARE_DATA:\r\n        return {\r\n          ...state,\r\n          provinceList: action.provinceList,\r\n          loading: false\r\n        };\r\n      case UPDATE_FILTERS:\r\n        return {\r\n          ...state,\r\n          filters: action.filters\r\n        };\r\n      case SET_PROVINCE:\r\n        return {\r\n          ...state,\r\n          province: action.province,\r\n        };\r\n      case SET_SEARCH_KEYWORDS:\r\n        return {\r\n          ...state,\r\n          searchKeywords: action.searchKeywords,\r\n        };\r\n      case CLOSE_MODAL:\r\n        return {\r\n          ...state,\r\n          openModal: false,\r\n          province: initialState.province,\r\n          formLoading: initialState.formLoading,\r\n          errors: initialState.errors\r\n        };\r\n      case SET_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...initialState.errors,\r\n            ...action.errors\r\n          }\r\n        };\r\n      case SET_FORM_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            formErrors: action.formErrors,\r\n            ...initialState.errors.message,\r\n          }\r\n        };\r\n      case HANDLE_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...state.errors,\r\n            ...action.errors.response.data\r\n          }\r\n        };\r\n      default:\r\n        return { ...state };\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  } finally {\r\n  }\r\n\r\n  return state;\r\n}\r\n","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Location\\Ward\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\location\\wardReducer.js",["249"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { CONFIRM_DELETE } from \"../../../commons/sweet-alert-modal\";\r\nimport { ALL } from '../../../constants/entities';\r\nimport { REDUX_API_URL } from \"../../../constants/redux-actions\";\r\nimport {\r\n  handleErrors,\r\n  resetSystemErrors\r\n} from \"../rootReducer\";\r\n\r\n\r\nconst prefix = \"WARD_\";\r\n// API\r\nconst PATH_API = `${REDUX_API_URL}/wards`;\r\nconst createAction = action => `${prefix}${action}`;\r\n\r\nexport const initialState = {\r\n  loading: true,\r\n  createButtonLoading: false,\r\n  formLoading: false,\r\n  modalFormSuccessMessage: \"\",\r\n  openModal: false,\r\n  filters: {\r\n    status: ALL\r\n  },\r\n  wardList: [\r\n  ],\r\n  ward: {\r\n    name: \"\",\r\n    slugName: \"\",\r\n    districtId: \"\",\r\n    status: \"ACTIVE\"\r\n  },\r\n  provinceId: \"\",\r\n  provinceList: [],\r\n  districtList: [],\r\n  searchKeywords: \"\",\r\n  errors: {\r\n    formErrors: {\r\n    },\r\n    errorMessage: \"\"\r\n  }\r\n};\r\n\r\nconst LIST_LOADING = createAction(\"LIST_LOADING\");\r\nconst CREATE_BUTTON_LOADING = createAction(\"CREATE_BUTTON_LOADING\");\r\nconst OPEN_MODAL = createAction(\"OPEN_MODAL\");\r\nconst PREPARE_DATA = createAction(\"PREPARE_DATA\");\r\nconst PREPARE_DATA_PROVINCE = createAction(\"PREPARE_DATA_PROVINCE\");\r\nconst PREPARE_DATA_DISTRICT = createAction(\"PREPARE_DATA_DISTRICT\");\r\nconst MODAL_FORM_LOADING = createAction(\"MODAL_FORM_LOADING\");\r\nconst MODAL_FORM_UPDATE_SUCCESS = createAction(\"MODAL_FORM_UPDATE_SUCESS\");\r\nconst SET_DISTRICT = createAction(\"SET_DISTRICT\");\r\nconst SET_SEARCH_KEYWORDS = createAction(\"SET_SEARCH_KEYWORDS\");\r\nconst SET_MODAL_STATUS = createAction(\"SET_MODAL_STATUS\");\r\nconst SET_SELECTED_FILTER = createAction(\"SET_SELECTED_FILTER\");\r\nconst CLOSE_MODAL = createAction(\"CLOSE_MODAL\");\r\nconst UPDATE_FILTERS = createAction(\"UPDATE_FILTERS\");\r\nconst HANDLE_ERRORS = createAction(\"HANDLE_ERRORS\");\r\nconst SET_ERRORS = createAction(\"SET_ERRORS\");\r\nconst SET_FORM_ERRORS = createAction(\"SET_FORM_ERRORS\");\r\n\r\nconst listLoading = loading => ({ type: LIST_LOADING, loading });\r\nconst createButtonLoading = loading => ({\r\n  type: CREATE_BUTTON_LOADING,\r\n  loading\r\n});\r\nconst formLoading = loading => ({ type: MODAL_FORM_LOADING, loading });\r\nconst prepareData = data => ({\r\n  type: PREPARE_DATA,\r\n  wardList: data\r\n});\r\nconst prepareDataProvince = data => ({\r\n  type: PREPARE_DATA_PROVINCE,\r\n  provinceList: data\r\n});\r\nexport const prepareDataDistrict = data => ({\r\n  type: PREPARE_DATA_DISTRICT,\r\n  districtList: data\r\n});\r\nconst setOpenModal = openModal => ({ type: OPEN_MODAL, openModal });\r\nconst setErrors = errors => ({ type: SET_ERRORS, errors });\r\nconst setFormErrors = formErrors => ({ type: SET_FORM_ERRORS, formErrors });\r\nconst modalFormSuccessMessage = message => ({\r\n  type: MODAL_FORM_UPDATE_SUCCESS,\r\n  message\r\n});\r\n\r\nexport const setWard = ward => ({ type: SET_DISTRICT, ward });\r\n\r\nexport const setSearchKeywords = searchKeywords => ({ type: SET_SEARCH_KEYWORDS, searchKeywords });\r\n\r\nexport const setModalStatus = modalStatus => ({\r\n  type: SET_MODAL_STATUS,\r\n  modalStatus\r\n});\r\n\r\nexport const setSelectedFilters = selectedFilters => ({\r\n  type: SET_SELECTED_FILTER,\r\n  selectedFilters\r\n});\r\n\r\nexport const closeModal = () => ({ type: CLOSE_MODAL });\r\nexport const fetchAllProvince = () => async dispatch => {\r\n  return axios\r\n    .get(`${REDUX_API_URL}/provinces-creation`, { timeout: 5000 })\r\n    .then(response => dispatch(prepareDataProvince(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n};\r\n\r\nexport const fetchAllDistrict = (provinceId) => async dispatch => {\r\n  return axios\r\n    .get(`${REDUX_API_URL}/districts-creation/${provinceId}`, { timeout: 5000 })\r\n    .then(response => dispatch(prepareDataDistrict(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n};\r\n\r\nexport const fetchAll = () => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  return axios\r\n    .get(PATH_API, { timeout: 5000 })\r\n    .then(response => dispatch(prepareData(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nexport const doSave = ward => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(formLoading(true));\r\n  const {\r\n    id,\r\n    name,\r\n    slugName,\r\n    districtId,\r\n    status\r\n  } = ward;\r\n  const params = {\r\n    name,\r\n    slugName,\r\n    districtId,\r\n    status,\r\n  };\r\n  const formErrors = {}\r\n  for (const param in params) {\r\n    const element = params[param];\r\n    if (!element) {\r\n      formErrors[param] = \"Vui lòng nhập đầy đủ thông tin\"\r\n    }\r\n  }\r\n  if (Object.keys(formErrors).length === 0) {\r\n    dispatch(setFormErrors({}))\r\n    if (!id) {\r\n      dispatch(doCreate(params));\r\n    } else {\r\n      dispatch(doUpdate({ ...params, id }));\r\n    }\r\n  } else {\r\n    dispatch(setFormErrors(formErrors))\r\n    dispatch(formLoading(false));\r\n  }\r\n};\r\n\r\nexport const getCreateAction = () => dispatch => {\r\n  dispatch(createButtonLoading(true));\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(setOpenModal(true));\r\n  dispatch(fetchAllProvince());\r\n  dispatch(createButtonLoading(false));\r\n};\r\n\r\nexport const doFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport const getUpdateAction = wardId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(listLoading(true));\r\n  dispatch(fetchAllProvince());\r\n  axios\r\n    .get(`${PATH_API}/${wardId}`, { timeout: 5000 })\r\n    .then(response => {\r\n      dispatch({\r\n        type: SET_DISTRICT,\r\n        ward: response.data,\r\n      });\r\n      dispatch(setOpenModal(true));\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nconst doCreate = ward => async dispatch => {\r\n  const params = JSON.stringify(ward);\r\n  axios\r\n    .post(PATH_API, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"Ward is created successfully!!\")\r\n      dispatch(setWard(initialState.ward));\r\n    })\r\n    .catch(error => {\r\n      toast.error(\"error\")\r\n      dispatch(handleErrors(error, HANDLE_ERRORS))\r\n    })\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nconst doUpdate = ward => async dispatch => {\r\n  const params = JSON.stringify(ward);\r\n  return axios\r\n    .put(`${PATH_API}/${ward.id}`, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"Ward is update successfully!!\");\r\n      dispatch(closeModal())\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nexport const doDelete = wardId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  dispatch(setErrors(initialState.errors));\r\n  const params = JSON.stringify(wardId);\r\n  CONFIRM_DELETE(\"Bạn sẽ không thể khôi phục lại dữ liệu\").then((result) => {\r\n    if (result.isConfirmed) {\r\n      return !Array.isArray(wardId) ?\r\n        axios\r\n          .delete(`${PATH_API}/${wardId}`)\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete Ward #${wardId} success!!`);\r\n          })\r\n          .catch(errors => dispatch(handleErrors(errors, HANDLE_ERRORS)))\r\n          .finally(() => dispatch(listLoading(false))) :\r\n        axios\r\n          .post(`${PATH_API}/delete-items`, params, {\r\n            timeout: 5000,\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }\r\n          })\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete Ward #${wardId} success!!`)\r\n          })\r\n          .catch(error => {\r\n            toast.error(\"error\")\r\n            dispatch(handleErrors(error, HANDLE_ERRORS))\r\n          })\r\n          .finally(() => dispatch(listLoading(false)));\r\n    }\r\n  })\r\n};\r\n\r\nexport const setFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport default function (state = initialState, action) {\r\n  try {\r\n    switch (action.type) {\r\n      case LIST_LOADING:\r\n        return { ...state, loading: action.loading };\r\n      case CREATE_BUTTON_LOADING:\r\n        return { ...state, createButtonLoading: action.loading };\r\n      case MODAL_FORM_UPDATE_SUCCESS:\r\n        return { ...state, modalFormSuccessMessage: action.message };\r\n      case OPEN_MODAL:\r\n        return { ...state, openModal: action.openModal };\r\n      case MODAL_FORM_LOADING:\r\n        return {\r\n          ...state,\r\n          formLoading: action.loading,\r\n          errors: action.loading ? initialState.errors : state.errors\r\n        };\r\n      case PREPARE_DATA:\r\n        return {\r\n          ...state,\r\n          wardList: action.wardList,\r\n          loading: false\r\n        };\r\n      case PREPARE_DATA_PROVINCE:\r\n        return {\r\n          ...state,\r\n          provinceList: action.provinceList,\r\n        };\r\n      case PREPARE_DATA_DISTRICT:\r\n        return {\r\n          ...state,\r\n          districtList: action.districtList,\r\n        };\r\n      case UPDATE_FILTERS:\r\n        return {\r\n          ...state,\r\n          filters: action.filters\r\n        };\r\n      case SET_DISTRICT:\r\n        return {\r\n          ...state,\r\n          ward: action.ward,\r\n        };\r\n      case SET_SEARCH_KEYWORDS:\r\n        return {\r\n          ...state,\r\n          searchKeywords: action.searchKeywords,\r\n        };\r\n      case CLOSE_MODAL:\r\n        return {\r\n          ...state,\r\n          openModal: false,\r\n          ward: initialState.ward,\r\n          formLoading: initialState.formLoading,\r\n          errors: initialState.errors\r\n        };\r\n      case SET_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...initialState.errors,\r\n            ...action.errors\r\n          }\r\n        };\r\n      case SET_FORM_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            formErrors: action.formErrors,\r\n            ...initialState.errors.message,\r\n          }\r\n        };\r\n      case HANDLE_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...state.errors,\r\n            ...action.errors.response.data\r\n          }\r\n        };\r\n      default:\r\n        return { ...state };\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  } finally {\r\n  }\r\n\r\n  return state;\r\n}\r\n","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\Ward\\WardTable\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Location\\Ward\\WardModal\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\classification\\categoryReducer.js",["250"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { CONFIRM_DELETE } from \"../../../commons/sweet-alert-modal\";\r\nimport { ALL } from '../../../constants/entities';\r\nimport { REDUX_API_URL } from \"../../../constants/redux-actions\";\r\nimport {\r\n  handleErrors,\r\n  resetSystemErrors\r\n} from \"../rootReducer\";\r\n\r\nconst prefix = \"CATEGORY_\";\r\n// API\r\nconst PATH_API = `${REDUX_API_URL}/categories`;\r\nconst createAction = action => `${prefix}${action}`;\r\n\r\nexport const initialState = {\r\n  loading: true,\r\n  createButtonLoading: false,\r\n  formLoading: false,\r\n  modalFormSuccessMessage: \"\",\r\n  openModal: false,\r\n  filters: {\r\n    status: ALL\r\n  },\r\n  categoryList: [\r\n  ],\r\n  category: {\r\n    name: \"\",\r\n    slugName: \"\",\r\n    status: \"ACTIVE\"\r\n  },\r\n  searchKeywords: \"\",\r\n  errors: {\r\n    formErrors: {},\r\n    errorMessage: \"\"\r\n  }\r\n};\r\n\r\nconst LIST_LOADING = createAction(\"LIST_LOADING\");\r\nconst CREATE_BUTTON_LOADING = createAction(\"CREATE_BUTTON_LOADING\");\r\nconst OPEN_MODAL = createAction(\"OPEN_MODAL\");\r\nconst PREPARE_DATA = createAction(\"PREPARE_DATA\");\r\nconst MODAL_FORM_LOADING = createAction(\"MODAL_FORM_LOADING\");\r\nconst MODAL_FORM_UPDATE_SUCCESS = createAction(\"MODAL_FORM_UPDATE_SUCESS\");\r\nconst SET_CATEGORY = createAction(\"SET_CATEGORY\");\r\nconst SET_SEARCH_KEYWORDS = createAction(\"SET_SEARCH_KEYWORDS\");\r\nconst SET_MODAL_STATUS = createAction(\"SET_MODAL_STATUS\");\r\nconst SET_SELECTED_FILTER = createAction(\"SET_SELECTED_FILTER\");\r\nconst CLOSE_MODAL = createAction(\"CLOSE_MODAL\");\r\nconst UPDATE_FILTERS = createAction(\"UPDATE_FILTERS\");\r\nconst HANDLE_ERRORS = createAction(\"HANDLE_ERRORS\");\r\nconst SET_ERRORS = createAction(\"SET_ERRORS\");\r\nconst SET_FORM_ERRORS = createAction(\"SET_FORM_ERRORS\");\r\n\r\nconst listLoading = loading => ({ type: LIST_LOADING, loading });\r\nconst createButtonLoading = loading => ({\r\n  type: CREATE_BUTTON_LOADING,\r\n  loading\r\n});\r\nconst formLoading = loading => ({ type: MODAL_FORM_LOADING, loading });\r\nconst prepareData = data => ({\r\n  type: PREPARE_DATA,\r\n  categoryList: data\r\n});\r\nconst setOpenModal = openModal => ({ type: OPEN_MODAL, openModal });\r\nconst setErrors = errors => ({ type: SET_ERRORS, errors });\r\nconst setFormErrors = formErrors => ({ type: SET_FORM_ERRORS, formErrors });\r\nconst modalFormSuccessMessage = message => ({\r\n  type: MODAL_FORM_UPDATE_SUCCESS,\r\n  message\r\n});\r\n\r\nexport const setCategory = category => ({ type: SET_CATEGORY, category });\r\n\r\nexport const setSearchKeywords = searchKeywords => ({ type: SET_SEARCH_KEYWORDS, searchKeywords });\r\n\r\nexport const setModalStatus = modalStatus => ({\r\n  type: SET_MODAL_STATUS,\r\n  modalStatus\r\n});\r\n\r\nexport const setSelectedFilters = selectedFilters => ({\r\n  type: SET_SELECTED_FILTER,\r\n  selectedFilters\r\n});\r\n\r\nexport const closeModal = () => ({ type: CLOSE_MODAL });\r\n\r\nexport const fetchAll = () => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  return axios\r\n    .get(PATH_API, { timeout: 5000 })\r\n    .then(response => dispatch(prepareData(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nexport const doSave = category => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(formLoading(true));\r\n  const {\r\n    id,\r\n    name,\r\n    slugName,\r\n    status\r\n  } = category;\r\n  const params = {\r\n    name,\r\n    slugName,\r\n    status,\r\n  };\r\n  const formErrors = {}\r\n  for (const param in params) {\r\n    const element = params[param];\r\n    if (!element) {\r\n      formErrors[param] = \"Vui lòng nhập đầy đủ thông tin\"\r\n    }\r\n  }\r\n  if (Object.keys(formErrors).length === 0) {\r\n    dispatch(setFormErrors({}))\r\n    if (!id) {\r\n      dispatch(doCreate(params));\r\n    } else {\r\n      dispatch(doUpdate({ ...params, id }));\r\n    }\r\n  } else {\r\n    dispatch(setFormErrors(formErrors))\r\n    dispatch(formLoading(false));\r\n  }\r\n};\r\n\r\nexport const getCreateAction = () => dispatch => {\r\n  dispatch(createButtonLoading(true));\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(setOpenModal(true))\r\n  dispatch(createButtonLoading(false));\r\n};\r\n\r\nexport const doFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport const getUpdateAction = categoryId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(listLoading(true));\r\n  axios\r\n    .get(`${PATH_API}/${categoryId}`, { timeout: 5000 })\r\n    .then(response => {\r\n      dispatch({\r\n        type: SET_CATEGORY,\r\n        category: response.data,\r\n      });\r\n      dispatch(setOpenModal(true));\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nconst doCreate = category => async dispatch => {\r\n  const params = JSON.stringify(category);\r\n  axios\r\n    .post(PATH_API, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"Category is created successfully!!\")\r\n      dispatch(setCategory(initialState.category));\r\n    })\r\n    .catch(error => {\r\n      toast.error(\"error\")\r\n      dispatch(handleErrors(error, HANDLE_ERRORS))\r\n    })\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nconst doUpdate = category => async dispatch => {\r\n  const params = JSON.stringify(category);\r\n  return axios\r\n    .put(`${PATH_API}/${category.id}`, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"Category is update successfully!!\");\r\n      dispatch(closeModal())\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nexport const doDelete = categoryId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  dispatch(setErrors(initialState.errors));\r\n  const params = JSON.stringify(categoryId);\r\n  CONFIRM_DELETE(\"Bạn sẽ không thể khôi phục lại dữ liệu\").then((result) => {\r\n    if (result.isConfirmed) {\r\n      return !Array.isArray(categoryId) ?\r\n        axios\r\n          .delete(`${PATH_API}/${categoryId}`)\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete Category #${categoryId} success!!`);\r\n          })\r\n          .catch(errors => dispatch(handleErrors(errors, HANDLE_ERRORS)))\r\n          .finally(() => dispatch(listLoading(false))) :\r\n        axios\r\n          .post(`${PATH_API}/delete-items`, params, {\r\n            timeout: 5000,\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }\r\n          })\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete Category #${categoryId} success!!`)\r\n          })\r\n          .catch(error => {\r\n            toast.error(\"error\")\r\n            dispatch(handleErrors(error, HANDLE_ERRORS))\r\n          })\r\n          .finally(() => dispatch(listLoading(false)));\r\n    }\r\n  })\r\n};\r\n\r\nexport const setFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport default function (state = initialState, action) {\r\n  try {\r\n    switch (action.type) {\r\n      case LIST_LOADING:\r\n        return { ...state, loading: action.loading };\r\n      case CREATE_BUTTON_LOADING:\r\n        return { ...state, createButtonLoading: action.loading };\r\n      case MODAL_FORM_UPDATE_SUCCESS:\r\n        return { ...state, modalFormSuccessMessage: action.message };\r\n      case OPEN_MODAL:\r\n        return { ...state, openModal: action.openModal };\r\n      case MODAL_FORM_LOADING:\r\n        return {\r\n          ...state,\r\n          formLoading: action.loading,\r\n          errors: action.loading ? initialState.errors : state.errors\r\n        };\r\n      case PREPARE_DATA:\r\n        return {\r\n          ...state,\r\n          categoryList: action.categoryList,\r\n          loading: false\r\n        };\r\n      case UPDATE_FILTERS:\r\n        return {\r\n          ...state,\r\n          filters: action.filters\r\n        };\r\n      case SET_CATEGORY:\r\n        return {\r\n          ...state,\r\n          category: action.category,\r\n        };\r\n      case SET_SEARCH_KEYWORDS:\r\n        return {\r\n          ...state,\r\n          searchKeywords: action.searchKeywords,\r\n        };\r\n      case CLOSE_MODAL:\r\n        return {\r\n          ...state,\r\n          openModal: false,\r\n          category: initialState.category,\r\n          formLoading: initialState.formLoading,\r\n          errors: initialState.errors\r\n        };\r\n      case SET_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...initialState.errors,\r\n            ...action.errors\r\n          }\r\n        };\r\n      case SET_FORM_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            formErrors: action.formErrors,\r\n            ...initialState.errors.message,\r\n          }\r\n        };\r\n      case HANDLE_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...state.errors,\r\n            ...action.errors.response.data\r\n          }\r\n        };\r\n      default:\r\n        return { ...state };\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  } finally {\r\n  }\r\n\r\n  return state;\r\n}\r\n","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Classification\\Category\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\Category\\CategoryTable\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\Category\\CategoryModal\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Classification\\TypeGroup\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\pages\\Classification\\Type\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\classification\\typeGroupReducer.js",["251"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { CONFIRM_DELETE } from \"../../../commons/sweet-alert-modal\";\r\nimport { ALL } from '../../../constants/entities';\r\nimport { REDUX_API_URL } from \"../../../constants/redux-actions\";\r\nimport {\r\n  handleErrors,\r\n  resetSystemErrors\r\n} from \"../rootReducer\";\r\n\r\nconst prefix = \"TYPE_GROUP_\";\r\n// API\r\nconst PATH_API = `${REDUX_API_URL}/type-groups`;\r\nconst createAction = action => `${prefix}${action}`;\r\n\r\nexport const initialState = {\r\n  loading: true,\r\n  createButtonLoading: false,\r\n  formLoading: false,\r\n  modalFormSuccessMessage: \"\",\r\n  openModal: false,\r\n  filters: {\r\n    status: ALL\r\n  },\r\n  typeGroupList: [\r\n  ],\r\n  typeGroup: {\r\n    name: \"\",\r\n    slugName: \"\",\r\n    categoryId: \"\",\r\n    status: \"ACTIVE\"\r\n  },\r\n  categoryList: [],\r\n  searchKeywords: \"\",\r\n  errors: {\r\n    formErrors: {\r\n    },\r\n    errorMessage: \"\"\r\n  }\r\n};\r\n\r\nconst LIST_LOADING = createAction(\"LIST_LOADING\");\r\nconst CREATE_BUTTON_LOADING = createAction(\"CREATE_BUTTON_LOADING\");\r\nconst OPEN_MODAL = createAction(\"OPEN_MODAL\");\r\nconst PREPARE_DATA = createAction(\"PREPARE_DATA\");\r\nconst PREPARE_DATA_PROVINCE = createAction(\"PREPARE_DATA_PROVINCE\");\r\nconst MODAL_FORM_LOADING = createAction(\"MODAL_FORM_LOADING\");\r\nconst MODAL_FORM_UPDATE_SUCCESS = createAction(\"MODAL_FORM_UPDATE_SUCESS\");\r\nconst SET_TYPE_GROUP = createAction(\"SET_TYPE_GROUP\");\r\nconst SET_SEARCH_KEYWORDS = createAction(\"SET_SEARCH_KEYWORDS\");\r\nconst SET_MODAL_STATUS = createAction(\"SET_MODAL_STATUS\");\r\nconst SET_SELECTED_FILTER = createAction(\"SET_SELECTED_FILTER\");\r\nconst CLOSE_MODAL = createAction(\"CLOSE_MODAL\");\r\nconst UPDATE_FILTERS = createAction(\"UPDATE_FILTERS\");\r\nconst HANDLE_ERRORS = createAction(\"HANDLE_ERRORS\");\r\nconst SET_ERRORS = createAction(\"SET_ERRORS\");\r\nconst SET_FORM_ERRORS = createAction(\"SET_FORM_ERRORS\");\r\n\r\nconst listLoading = loading => ({ type: LIST_LOADING, loading });\r\nconst createButtonLoading = loading => ({\r\n  type: CREATE_BUTTON_LOADING,\r\n  loading\r\n});\r\nconst formLoading = loading => ({ type: MODAL_FORM_LOADING, loading });\r\nconst prepareData = data => ({\r\n  type: PREPARE_DATA,\r\n  typeGroupList: data\r\n});\r\nconst prepareDataCategory = data => ({\r\n  type: PREPARE_DATA_PROVINCE,\r\n  categoryList: data\r\n});\r\nconst setOpenModal = openModal => ({ type: OPEN_MODAL, openModal });\r\nconst setErrors = errors => ({ type: SET_ERRORS, errors });\r\nconst setFormErrors = formErrors => ({ type: SET_FORM_ERRORS, formErrors });\r\nconst modalFormSuccessMessage = message => ({\r\n  type: MODAL_FORM_UPDATE_SUCCESS,\r\n  message\r\n});\r\n\r\nexport const setTypeGroup = typeGroup => ({ type: SET_TYPE_GROUP, typeGroup });\r\n\r\nexport const setSearchKeywords = searchKeywords => ({ type: SET_SEARCH_KEYWORDS, searchKeywords });\r\n\r\nexport const setModalStatus = modalStatus => ({\r\n  type: SET_MODAL_STATUS,\r\n  modalStatus\r\n});\r\n\r\nexport const setSelectedFilters = selectedFilters => ({\r\n  type: SET_SELECTED_FILTER,\r\n  selectedFilters\r\n});\r\n\r\nexport const closeModal = () => ({ type: CLOSE_MODAL });\r\nexport const fetchAllCategory = () => async dispatch => {\r\n\r\n  return axios\r\n    .get(`${REDUX_API_URL}/categories-creation`, { timeout: 5000 })\r\n    .then(response => dispatch(prepareDataCategory(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n};\r\n\r\nexport const fetchAll = () => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  return axios\r\n    .get(PATH_API, { timeout: 5000 })\r\n    .then(response => dispatch(prepareData(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nexport const doSave = typeGroup => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(formLoading(true));\r\n  const {\r\n    id,\r\n    name,\r\n    slugName,\r\n    categoryId,\r\n    status\r\n  } = typeGroup;\r\n  const params = {\r\n    name,\r\n    slugName,\r\n    categoryId,\r\n    status,\r\n  };\r\n  const formErrors = {}\r\n  for (const param in params) {\r\n    const element = params[param];\r\n    if (!element) {\r\n      formErrors[param] = \"Vui lòng nhập đầy đủ thông tin\"\r\n    }\r\n  }\r\n  if (Object.keys(formErrors).length === 0) {\r\n    dispatch(setFormErrors({}))\r\n    if (!id) {\r\n      dispatch(doCreate(params));\r\n    } else {\r\n      dispatch(doUpdate({ ...params, id }));\r\n    }\r\n  } else {\r\n    dispatch(setFormErrors(formErrors))\r\n    dispatch(formLoading(false));\r\n  }\r\n};\r\n\r\nexport const getCreateAction = () => dispatch => {\r\n  dispatch(createButtonLoading(true));\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(setOpenModal(true));\r\n  dispatch(fetchAllCategory());\r\n  dispatch(createButtonLoading(false));\r\n};\r\n\r\nexport const doFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport const getUpdateAction = typeGroupId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(listLoading(true));\r\n  dispatch(fetchAllCategory());\r\n  axios\r\n    .get(`${PATH_API}/${typeGroupId}`, { timeout: 5000 })\r\n    .then(response => {\r\n      dispatch({\r\n        type: SET_TYPE_GROUP,\r\n        typeGroup: response.data,\r\n      });\r\n      dispatch(setOpenModal(true));\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nconst doCreate = typeGroup => async dispatch => {\r\n  const params = JSON.stringify(typeGroup);\r\n  axios\r\n    .post(PATH_API, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"TypeGroup is created successfully!!\")\r\n      dispatch(setTypeGroup(initialState.typeGroup));\r\n    })\r\n    .catch(error => {\r\n      toast.error(\"error\")\r\n      dispatch(handleErrors(error, HANDLE_ERRORS))\r\n    })\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nconst doUpdate = typeGroup => async dispatch => {\r\n  const params = JSON.stringify(typeGroup);\r\n  return axios\r\n    .put(`${PATH_API}/${typeGroup.id}`, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"TypeGroup is update successfully!!\");\r\n      dispatch(closeModal())\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nexport const doDelete = typeGroupId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  dispatch(setErrors(initialState.errors));\r\n  const params = JSON.stringify(typeGroupId);\r\n  CONFIRM_DELETE(\"Bạn sẽ không thể khôi phục lại dữ liệu\").then((result) => {\r\n    if (result.isConfirmed) {\r\n      return !Array.isArray(typeGroupId) ?\r\n        axios\r\n          .delete(`${PATH_API}/${typeGroupId}`)\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete TypeGroup #${typeGroupId} success!!`);\r\n          })\r\n          .catch(errors => dispatch(handleErrors(errors, HANDLE_ERRORS)))\r\n          .finally(() => dispatch(listLoading(false))) :\r\n        axios\r\n          .post(`${PATH_API}/delete-items`, params, {\r\n            timeout: 5000,\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }\r\n          })\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete TypeGroup #${typeGroupId} success!!`)\r\n          })\r\n          .catch(error => {\r\n            toast.error(\"error\")\r\n            dispatch(handleErrors(error, HANDLE_ERRORS))\r\n          })\r\n          .finally(() => dispatch(listLoading(false)));\r\n    }\r\n  })\r\n};\r\n\r\nexport const setFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport default function (state = initialState, action) {\r\n  try {\r\n    switch (action.type) {\r\n      case LIST_LOADING:\r\n        return { ...state, loading: action.loading };\r\n      case CREATE_BUTTON_LOADING:\r\n        return { ...state, createButtonLoading: action.loading };\r\n      case MODAL_FORM_UPDATE_SUCCESS:\r\n        return { ...state, modalFormSuccessMessage: action.message };\r\n      case OPEN_MODAL:\r\n        return { ...state, openModal: action.openModal };\r\n      case MODAL_FORM_LOADING:\r\n        return {\r\n          ...state,\r\n          formLoading: action.loading,\r\n          errors: action.loading ? initialState.errors : state.errors\r\n        };\r\n      case PREPARE_DATA:\r\n        return {\r\n          ...state,\r\n          typeGroupList: action.typeGroupList,\r\n          loading: false\r\n        };\r\n      case PREPARE_DATA_PROVINCE:\r\n        return {\r\n          ...state,\r\n          categoryList: action.categoryList,\r\n        };\r\n      case UPDATE_FILTERS:\r\n        return {\r\n          ...state,\r\n          filters: action.filters\r\n        };\r\n      case SET_TYPE_GROUP:\r\n        return {\r\n          ...state,\r\n          typeGroup: action.typeGroup,\r\n        };\r\n      case SET_SEARCH_KEYWORDS:\r\n        return {\r\n          ...state,\r\n          searchKeywords: action.searchKeywords,\r\n        };\r\n      case CLOSE_MODAL:\r\n        return {\r\n          ...state,\r\n          openModal: false,\r\n          typeGroup: initialState.typeGroup,\r\n          formLoading: initialState.formLoading,\r\n          errors: initialState.errors\r\n        };\r\n      case SET_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...initialState.errors,\r\n            ...action.errors\r\n          }\r\n        };\r\n      case SET_FORM_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            formErrors: action.formErrors,\r\n            ...initialState.errors.message,\r\n          }\r\n        };\r\n      case HANDLE_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...state.errors,\r\n            ...action.errors.response.data\r\n          }\r\n        };\r\n      default:\r\n        return { ...state };\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  } finally {\r\n  }\r\n\r\n  return state;\r\n}\r\n","D:\\Documents\\dev\\fe-react-dashboard\\src\\redux\\reducers\\classification\\typeReducer.js",["252"],"import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { CONFIRM_DELETE } from \"../../../commons/sweet-alert-modal\";\r\nimport { ALL } from '../../../constants/entities';\r\nimport { REDUX_API_URL } from \"../../../constants/redux-actions\";\r\nimport {\r\n  handleErrors,\r\n  resetSystemErrors\r\n} from \"../rootReducer\";\r\n\r\n\r\nconst prefix = \"TYPE_\";\r\n// API\r\nconst PATH_API = `${REDUX_API_URL}/types`;\r\nconst createAction = action => `${prefix}${action}`;\r\n\r\nexport const initialState = {\r\n  loading: true,\r\n  createButtonLoading: false,\r\n  formLoading: false,\r\n  modalFormSuccessMessage: \"\",\r\n  openModal: false,\r\n  filters: {\r\n    status: ALL\r\n  },\r\n  typeList: [\r\n  ],\r\n  typeItem: {\r\n    name: \"\",\r\n    slugName: \"\",\r\n    typeGroupId: \"\",\r\n    status: \"ACTIVE\"\r\n  },\r\n  categoryId: \"\",\r\n  categoryList: [],\r\n  typeGroupList: [],\r\n  searchKeywords: \"\",\r\n  errors: {\r\n    formErrors: {\r\n    },\r\n    errorMessage: \"\"\r\n  }\r\n};\r\n\r\nconst LIST_LOADING = createAction(\"LIST_LOADING\");\r\nconst CREATE_BUTTON_LOADING = createAction(\"CREATE_BUTTON_LOADING\");\r\nconst OPEN_MODAL = createAction(\"OPEN_MODAL\");\r\nconst PREPARE_DATA = createAction(\"PREPARE_DATA\");\r\nconst PREPARE_DATA_CATEGORY = createAction(\"PREPARE_DATA_CATEGORY\");\r\nconst PREPARE_DATA_TYPE_GROUP = createAction(\"PREPARE_DATA_TYPE_GROUP\");\r\nconst MODAL_FORM_LOADING = createAction(\"MODAL_FORM_LOADING\");\r\nconst MODAL_FORM_UPDATE_SUCCESS = createAction(\"MODAL_FORM_UPDATE_SUCESS\");\r\nconst SET_TYPE_ITEM = createAction(\"SET_TYPE_ITEM\");\r\nconst SET_SEARCH_KEYWORDS = createAction(\"SET_SEARCH_KEYWORDS\");\r\nconst SET_MODAL_STATUS = createAction(\"SET_MODAL_STATUS\");\r\nconst SET_SELECTED_FILTER = createAction(\"SET_SELECTED_FILTER\");\r\nconst CLOSE_MODAL = createAction(\"CLOSE_MODAL\");\r\nconst UPDATE_FILTERS = createAction(\"UPDATE_FILTERS\");\r\nconst HANDLE_ERRORS = createAction(\"HANDLE_ERRORS\");\r\nconst SET_ERRORS = createAction(\"SET_ERRORS\");\r\nconst SET_FORM_ERRORS = createAction(\"SET_FORM_ERRORS\");\r\n\r\nconst listLoading = loading => ({ type: LIST_LOADING, loading });\r\nconst createButtonLoading = loading => ({\r\n  type: CREATE_BUTTON_LOADING,\r\n  loading\r\n});\r\nconst formLoading = loading => ({ type: MODAL_FORM_LOADING, loading });\r\nconst prepareData = data => ({\r\n  type: PREPARE_DATA,\r\n  typeList: data\r\n});\r\nconst prepareDataCategory = data => ({\r\n  type: PREPARE_DATA_CATEGORY,\r\n  categoryList: data\r\n});\r\nexport const prepareDataTypeGroup = data => ({\r\n  type: PREPARE_DATA_TYPE_GROUP,\r\n  typeGroupList: data\r\n});\r\nconst setOpenModal = openModal => ({ type: OPEN_MODAL, openModal });\r\nconst setErrors = errors => ({ type: SET_ERRORS, errors });\r\nconst setFormErrors = formErrors => ({ type: SET_FORM_ERRORS, formErrors });\r\nconst modalFormSuccessMessage = message => ({\r\n  type: MODAL_FORM_UPDATE_SUCCESS,\r\n  message\r\n});\r\n\r\nexport const setTypeItem = typeItem => ({ type: SET_TYPE_ITEM, typeItem });\r\n\r\nexport const setSearchKeywords = searchKeywords => ({ type: SET_SEARCH_KEYWORDS, searchKeywords });\r\n\r\nexport const setModalStatus = modalStatus => ({\r\n  type: SET_MODAL_STATUS,\r\n  modalStatus\r\n});\r\n\r\nexport const setSelectedFilters = selectedFilters => ({\r\n  type: SET_SELECTED_FILTER,\r\n  selectedFilters\r\n});\r\n\r\nexport const closeModal = () => ({ type: CLOSE_MODAL });\r\nexport const fetchAllCategory = () => async dispatch => {\r\n  return axios\r\n    .get(`${REDUX_API_URL}/categories-creation`, { timeout: 5000 })\r\n    .then(response => dispatch(prepareDataCategory(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n};\r\n\r\nexport const fetchAllTypeGroup = (categoryId) => async dispatch => {\r\n  return axios\r\n    .get(`${REDUX_API_URL}/type-groups-creation/${categoryId}`, { timeout: 5000 })\r\n    .then(response => dispatch(prepareDataTypeGroup(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n};\r\n\r\nexport const fetchAll = () => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  return axios\r\n    .get(PATH_API, { timeout: 5000 })\r\n    .then(response => dispatch(prepareData(response.data)))\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nexport const doSave = typeItem => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(formLoading(true));\r\n  const {\r\n    id,\r\n    name,\r\n    slugName,\r\n    typeGroupId,\r\n    status\r\n  } = typeItem;\r\n  const params = {\r\n    name,\r\n    slugName,\r\n    typeGroupId,\r\n    status,\r\n  };\r\n  const formErrors = {}\r\n  for (const param in params) {\r\n    const element = params[param];\r\n    if (!element) {\r\n      formErrors[param] = \"Vui lòng nhập đầy đủ thông tin\"\r\n    }\r\n  }\r\n  if (Object.keys(formErrors).length === 0) {\r\n    dispatch(setFormErrors({}))\r\n    if (!id) {\r\n      dispatch(doCreate(params));\r\n    } else {\r\n      dispatch(doUpdate({ ...params, id }));\r\n    }\r\n  } else {\r\n    dispatch(setFormErrors(formErrors))\r\n    dispatch(formLoading(false));\r\n  }\r\n};\r\n\r\nexport const getCreateAction = () => dispatch => {\r\n  dispatch(createButtonLoading(true));\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(setOpenModal(true));\r\n  dispatch(fetchAllCategory());\r\n  dispatch(createButtonLoading(false));\r\n};\r\n\r\nexport const doFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport const getUpdateAction = typeItemId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(modalFormSuccessMessage(\"\"));\r\n  dispatch(listLoading(true));\r\n  dispatch(fetchAllCategory());\r\n  axios\r\n    .get(`${PATH_API}/${typeItemId}`, { timeout: 5000 })\r\n    .then(response => {\r\n      dispatch({\r\n        type: SET_TYPE_ITEM,\r\n        typeItem: response.data,\r\n      });\r\n      dispatch(setOpenModal(true));\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(listLoading(false)));\r\n};\r\n\r\nconst doCreate = typeItem => async dispatch => {\r\n  const params = JSON.stringify(typeItem);\r\n  axios\r\n    .post(PATH_API, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"TypeItem is created successfully!!\")\r\n      dispatch(setTypeItem(initialState.typeItem));\r\n    })\r\n    .catch(error => {\r\n      toast.error(\"error\")\r\n      dispatch(handleErrors(error, HANDLE_ERRORS))\r\n    })\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nconst doUpdate = typeItem => async dispatch => {\r\n  const params = JSON.stringify(typeItem);\r\n  return axios\r\n    .put(`${PATH_API}/${typeItem.id}`, params, {\r\n      timeout: 5000,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      dispatch(prepareData(response.data));\r\n      toast.success(\"TypeItem is update successfully!!\");\r\n      dispatch(closeModal())\r\n    })\r\n    .catch(error => dispatch(handleErrors(error, HANDLE_ERRORS)))\r\n    .finally(() => dispatch(formLoading(false)));\r\n};\r\n\r\nexport const doDelete = typeItemId => async dispatch => {\r\n  dispatch(resetSystemErrors());\r\n  dispatch(listLoading(true));\r\n  dispatch(setErrors(initialState.errors));\r\n  const params = JSON.stringify(typeItemId);\r\n  CONFIRM_DELETE(\"Bạn sẽ không thể khôi phục lại dữ liệu\").then((result) => {\r\n    if (result.isConfirmed) {\r\n      return !Array.isArray(typeItemId) ?\r\n        axios\r\n          .delete(`${PATH_API}/${typeItemId}`)\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete TypeItem #${typeItemId} success!!`);\r\n          })\r\n          .catch(errors => dispatch(handleErrors(errors, HANDLE_ERRORS)))\r\n          .finally(() => dispatch(listLoading(false))) :\r\n        axios\r\n          .post(`${PATH_API}/delete-items`, params, {\r\n            timeout: 5000,\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }\r\n          })\r\n          .then(response => {\r\n            dispatch(prepareData(response.data));\r\n            toast.success(`Delete TypeItem #${typeItemId} success!!`)\r\n          })\r\n          .catch(error => {\r\n            toast.error(\"error\")\r\n            dispatch(handleErrors(error, HANDLE_ERRORS))\r\n          })\r\n          .finally(() => dispatch(listLoading(false)));\r\n    }\r\n  })\r\n};\r\n\r\nexport const setFilters = filters => ({ type: UPDATE_FILTERS, filters });\r\n\r\nexport default function (state = initialState, action) {\r\n  try {\r\n    switch (action.type) {\r\n      case LIST_LOADING:\r\n        return { ...state, loading: action.loading };\r\n      case CREATE_BUTTON_LOADING:\r\n        return { ...state, createButtonLoading: action.loading };\r\n      case MODAL_FORM_UPDATE_SUCCESS:\r\n        return { ...state, modalFormSuccessMessage: action.message };\r\n      case OPEN_MODAL:\r\n        return { ...state, openModal: action.openModal };\r\n      case MODAL_FORM_LOADING:\r\n        return {\r\n          ...state,\r\n          formLoading: action.loading,\r\n          errors: action.loading ? initialState.errors : state.errors\r\n        };\r\n      case PREPARE_DATA:\r\n        return {\r\n          ...state,\r\n          typeList: action.typeList,\r\n          loading: false\r\n        };\r\n      case PREPARE_DATA_CATEGORY:\r\n        return {\r\n          ...state,\r\n          categoryList: action.categoryList,\r\n        };\r\n      case PREPARE_DATA_TYPE_GROUP:\r\n        return {\r\n          ...state,\r\n          typeGroupList: action.typeGroupList,\r\n        };\r\n      case UPDATE_FILTERS:\r\n        return {\r\n          ...state,\r\n          filters: action.filters\r\n        };\r\n      case SET_TYPE_ITEM:\r\n        return {\r\n          ...state,\r\n          typeItem: action.typeItem,\r\n        };\r\n      case SET_SEARCH_KEYWORDS:\r\n        return {\r\n          ...state,\r\n          searchKeywords: action.searchKeywords,\r\n        };\r\n      case CLOSE_MODAL:\r\n        return {\r\n          ...state,\r\n          openModal: false,\r\n          typeItem: initialState.typeItem,\r\n          formLoading: initialState.formLoading,\r\n          errors: initialState.errors\r\n        };\r\n      case SET_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...initialState.errors,\r\n            ...action.errors\r\n          }\r\n        };\r\n      case SET_FORM_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            formErrors: action.formErrors,\r\n            ...initialState.errors.message,\r\n          }\r\n        };\r\n      case HANDLE_ERRORS:\r\n        return {\r\n          ...state,\r\n          errors: {\r\n            ...state.errors,\r\n            ...action.errors.response.data\r\n          }\r\n        };\r\n      default:\r\n        return { ...state };\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  } finally {\r\n  }\r\n\r\n  return state;\r\n}\r\n","D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\TypeGroup\\TypeGroupTable\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\Type\\TypeTable\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\Type\\TypeModal\\index.js",[],"D:\\Documents\\dev\\fe-react-dashboard\\src\\components\\organisms\\Classification\\TypeGroup\\TypeGroupModal\\index.js",[],{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"253","replacedBy":"257"},{"ruleId":"255","replacedBy":"258"},{"ruleId":"253","replacedBy":"259"},{"ruleId":"255","replacedBy":"260"},{"ruleId":"253","replacedBy":"261"},{"ruleId":"255","replacedBy":"262"},{"ruleId":"263","severity":1,"message":"264","line":25,"column":7,"nodeType":"265","messageId":"266","endLine":25,"endColumn":21},{"ruleId":"263","severity":1,"message":"267","line":26,"column":7,"nodeType":"265","messageId":"266","endLine":26,"endColumn":22},{"ruleId":"263","severity":1,"message":"268","line":40,"column":7,"nodeType":"265","messageId":"266","endLine":40,"endColumn":21},{"ruleId":"263","severity":1,"message":"269","line":45,"column":7,"nodeType":"265","messageId":"266","endLine":45,"endColumn":25},{"ruleId":"270","severity":1,"message":"271","line":97,"column":1,"nodeType":"272","endLine":140,"endColumn":2},{"ruleId":"270","severity":1,"message":"271","line":257,"column":1,"nodeType":"272","endLine":341,"endColumn":2},{"ruleId":"270","severity":1,"message":"271","line":238,"column":1,"nodeType":"272","endLine":317,"endColumn":2},{"ruleId":"270","severity":1,"message":"271","line":271,"column":1,"nodeType":"272","endLine":360,"endColumn":2},{"ruleId":"270","severity":1,"message":"271","line":238,"column":1,"nodeType":"272","endLine":317,"endColumn":2},{"ruleId":"270","severity":1,"message":"271","line":257,"column":1,"nodeType":"272","endLine":341,"endColumn":2},{"ruleId":"270","severity":1,"message":"271","line":271,"column":1,"nodeType":"272","endLine":360,"endColumn":2},"no-native-reassign",["273"],"no-negated-in-lhs",["274"],["273"],["274"],["273"],["274"],["273"],["274"],"no-unused-vars","'PATH_API_LOGIN' is assigned a value but never used.","Identifier","unusedVar","'PATH_API_LOGOUT' is assigned a value but never used.","'setFormLoading' is assigned a value but never used.","'HANDLE_FORM_ERRORS' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]